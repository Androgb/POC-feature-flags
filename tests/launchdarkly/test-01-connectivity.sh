#!/bin/bash

echo "üß™ Test #1: Conectividad B√°sica - LaunchDarkly"
echo "============================================="

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo "üéØ Objetivo: Verificar conectividad b√°sica con LaunchDarkly"
echo ""

# Verificar que el backend est√© corriendo
echo "üîç Verificando estado del backend..."
if curl -s http://localhost:3001/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend activo en puerto 3001${NC}"
else
    echo -e "${RED}‚ùå Backend no responde en puerto 3001${NC}"
    exit 1
fi

echo ""
echo "üìä Test 1: Verificar conexi√≥n LaunchDarkly"
echo "-----------------------------------------"

# Verificar respuesta del health endpoint
HEALTH_RESPONSE=$(curl -s http://localhost:3001/health)
PROVIDER_NAME=$(echo "$HEALTH_RESPONSE" | jq -r '.provider.name // "unknown"')
PROVIDER_CONNECTED=$(echo "$HEALTH_RESPONSE" | jq -r '.provider.connected // false')

echo "üîó Provider detectado: $PROVIDER_NAME"
echo "üì° Estado conexi√≥n: $PROVIDER_CONNECTED"

if [ "$PROVIDER_NAME" = "launchdarkly" ] && [ "$PROVIDER_CONNECTED" = "true" ]; then
    echo -e "${GREEN}‚úÖ Conectividad LaunchDarkly exitosa${NC}"
    CONNECTIVITY_OK=true
else
    echo -e "${RED}‚ùå Problema de conectividad LaunchDarkly${NC}"
    CONNECTIVITY_OK=false
fi

echo ""
echo "üìä Test 2: Verificar SDK initialization"
echo "--------------------------------------"

# Verificar detalles del provider
PROVIDER_INFO=$(echo "$HEALTH_RESPONSE" | jq -r '.provider.info // {}')
IS_INITIALIZED=$(echo "$PROVIDER_INFO" | jq -r '.isInitialized // false')
FLAGS_EXPECTED=$(echo "$PROVIDER_INFO" | jq -r '.flagsExpected // []')

echo "üöÄ SDK inicializado: $IS_INITIALIZED"
echo "üè∑Ô∏è  Flags esperados: $(echo "$FLAGS_EXPECTED" | jq length) flags"

if [ "$IS_INITIALIZED" = "true" ]; then
    echo -e "${GREEN}‚úÖ SDK LaunchDarkly inicializado correctamente${NC}"
    INITIALIZATION_OK=true
else
    echo -e "${RED}‚ùå SDK LaunchDarkly no inicializado${NC}"
    INITIALIZATION_OK=false
fi

echo ""
echo "üìä Test 3: Verificar flags disponibles"
echo "-------------------------------------"

# Verificar endpoint de flags
FLAGS_RESPONSE=$(curl -s http://localhost:3001/health/flags)
FLAGS_COUNT=$(echo "$FLAGS_RESPONSE" | jq '.flags.all | length // 0')

echo "üìù Flags disponibles: $FLAGS_COUNT"

if [ $FLAGS_COUNT -gt 0 ]; then
    echo -e "${GREEN}‚úÖ Flags cargados correctamente${NC}"
    FLAGS_OK=true
    
    # Mostrar algunos flags de ejemplo
    echo "üìã Ejemplo de flags:"
    echo "$FLAGS_RESPONSE" | jq '.flags.all | to_entries | .[:3] | .[] | "   ‚Ä¢ \(.key): \(.value)"' -r
else
    echo -e "${RED}‚ùå No se pudieron cargar flags${NC}"
    FLAGS_OK=false
fi

echo ""
echo "üéØ Resumen del Test #1:"
echo "======================"

# Evaluar resultado final
if [ "$CONNECTIVITY_OK" = true ] && [ "$INITIALIZATION_OK" = true ] && [ "$FLAGS_OK" = true ]; then
    echo -e "${GREEN}‚úÖ Test #1 PASADO: Conectividad LaunchDarkly exitosa${NC}"
    FINAL_RESULT="PASADO"
elif [ "$CONNECTIVITY_OK" = true ] && [ "$INITIALIZATION_OK" = true ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Test #1 PARCIAL: Conectado pero flags limitados${NC}"
    FINAL_RESULT="PARCIAL"
else
    echo -e "${RED}‚ùå Test #1 FALLIDO: Problemas de conectividad${NC}"
    FINAL_RESULT="FALLIDO"
fi

echo ""
echo "üìä M√©tricas finales:"
echo "   ‚Ä¢ Conectividad: $([ "$CONNECTIVITY_OK" = true ] && echo "‚úÖ OK" || echo "‚ùå Error")"
echo "   ‚Ä¢ Inicializaci√≥n: $([ "$INITIALIZATION_OK" = true ] && echo "‚úÖ OK" || echo "‚ùå Error")"
echo "   ‚Ä¢ Flags disponibles: $FLAGS_COUNT"

echo ""
echo "üöÄ Pr√≥ximo test: Test #2 - Creaci√≥n de flags"

# Salir con c√≥digo apropiado
if [ "$FINAL_RESULT" = "PASADO" ]; then
    exit 0
elif [ "$FINAL_RESULT" = "PARCIAL" ]; then
    exit 1
else
    exit 2
fi 