#!/bin/bash

echo "üß™ Test #5: Propagaci√≥n del Cambio - LaunchDarkly"
echo "==============================================="

# Colores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo "üéØ Objetivo: Medir tiempo de propagaci√≥n de cambios (Target: ‚â§60s)"
echo ""

# Verificar que el backend est√© corriendo
echo "üîç Verificando estado del backend..."
if curl -s http://localhost:3001/health > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Backend activo en puerto 3001${NC}"
else
    echo -e "${RED}‚ùå Backend no responde en puerto 3001${NC}"
    exit 1
fi

echo ""
echo "üìä Test 1: Valor inicial del flag enable_payments"
echo "------------------------------------------------"

# Obtener valor inicial
INITIAL_RESPONSE=$(curl -s http://localhost:3001/health/flags)
INITIAL_VALUE=$(echo "$INITIAL_RESPONSE" | jq -r '.flags.enable_payments')
INITIAL_TIMESTAMP=$(echo "$INITIAL_RESPONSE" | jq -r '.timestamp')

echo "üéØ Valor inicial de enable_payments: $INITIAL_VALUE"
echo "‚è∞ Timestamp inicial: $INITIAL_TIMESTAMP"

# Determinar valor objetivo (opuesto al actual)
if [ "$INITIAL_VALUE" = "true" ]; then
    TARGET_VALUE="false"
    OPPOSITE_VALUE="true"
else
    TARGET_VALUE="true"
    OPPOSITE_VALUE="false"
fi

echo ""
echo -e "${YELLOW}üìã INSTRUCCIONES PARA EL TEST MANUAL:${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo "üåê 1. Abre el dashboard de LaunchDarkly en tu navegador:"
echo "   üîó https://app.launchdarkly.com"
echo ""
echo "üéõÔ∏è  2. Navega a tu proyecto y encuentra el flag 'enable_payments'"
echo ""
echo "üîß 3. Cambia el valor del flag a: ${TARGET_VALUE^^}"
echo "   üìä Valor actual: ${INITIAL_VALUE^^}"
echo "   üéØ Cambiar a: ${TARGET_VALUE^^}"
echo ""
echo "‚è∞ 4. Anota la hora exacta cuando haces el cambio"
echo ""
echo "üïê 5. El script monitorear√° autom√°ticamente el cambio"
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

echo ""
echo -e "${BLUE}‚è≥ Esperando que hagas el cambio en el dashboard...${NC}"
echo "   (Presiona Ctrl+C para cancelar si no vas a hacer el cambio)"

# Iniciar monitoreo
POLL_INTERVAL=2  # Verificar cada 2 segundos
MAX_WAIT_TIME=120  # M√°ximo 2 minutos
ELAPSED_TIME=0
CHANGE_DETECTED=false
CHANGE_TIMESTAMP=""

echo ""
echo "üîÑ Iniciando monitoreo autom√°tico cada ${POLL_INTERVAL}s..."
echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
echo "‚îÇ   Tiempo    ‚îÇ   Valor     ‚îÇ  Cambio     ‚îÇ            Timestamp             ‚îÇ"
echo "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§"

while [ $ELAPSED_TIME -le $MAX_WAIT_TIME ] && [ "$CHANGE_DETECTED" = false ]; do
    # Verificar valor actual
    CURRENT_RESPONSE=$(curl -s http://localhost:3001/health/flags 2>/dev/null)
    
    if [ $? -eq 0 ]; then
        CURRENT_VALUE=$(echo "$CURRENT_RESPONSE" | jq -r '.flags.enable_payments // "null"')
        CURRENT_TIMESTAMP=$(echo "$CURRENT_RESPONSE" | jq -r '.timestamp // "null"')
        
        # Formatear tiempo transcurrido
        TIME_DISPLAY=$(printf "%3ds" $ELAPSED_TIME)
        
        # Verificar si hay cambio
        if [ "$CURRENT_VALUE" != "$INITIAL_VALUE" ]; then
            CHANGE_DETECTED=true
            CHANGE_TIMESTAMP=$CURRENT_TIMESTAMP
            echo -e "‚îÇ ${TIME_DISPLAY}       ‚îÇ ${GREEN}${CURRENT_VALUE}${NC}       ‚îÇ ${GREEN}‚úÖ DETECTADO${NC} ‚îÇ ${CURRENT_TIMESTAMP} ‚îÇ"
        else
            echo -e "‚îÇ ${TIME_DISPLAY}       ‚îÇ ${CURRENT_VALUE}        ‚îÇ ‚è≥ Esperando  ‚îÇ ${CURRENT_TIMESTAMP} ‚îÇ"
        fi
    else
        echo -e "‚îÇ ${TIME_DISPLAY}       ‚îÇ ${RED}ERROR${NC}       ‚îÇ ${RED}‚ùå Sin resp.${NC}  ‚îÇ N/A                              ‚îÇ"
    fi
    
    if [ "$CHANGE_DETECTED" = false ]; then
        sleep $POLL_INTERVAL
        ELAPSED_TIME=$((ELAPSED_TIME + POLL_INTERVAL))
    fi
done

echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"

echo ""
echo "üìä Test 2: An√°lisis de Resultados"
echo "--------------------------------"

if [ "$CHANGE_DETECTED" = true ]; then
    echo -e "${GREEN}‚úÖ Cambio detectado exitosamente${NC}"
    echo ""
    echo "üìà M√©tricas de Propagaci√≥n:"
    echo "   ‚Ä¢ Valor inicial: $INITIAL_VALUE"
    echo "   ‚Ä¢ Valor final: $CURRENT_VALUE"
    echo "   ‚Ä¢ Tiempo de detecci√≥n: ${ELAPSED_TIME}s"
    echo "   ‚Ä¢ Objetivo: ‚â§60s"
    echo "   ‚Ä¢ Intervalo de polling: ${POLL_INTERVAL}s"
    
    # Evaluar resultado
    if [ $ELAPSED_TIME -le 60 ]; then
        echo -e "   ‚Ä¢ Estado: ${GREEN}‚úÖ PASADO${NC} (${ELAPSED_TIME}s ‚â§ 60s)"
        TEST_RESULT="PASADO"
    else
        echo -e "   ‚Ä¢ Estado: ${RED}‚ùå FALLIDO${NC} (${ELAPSED_TIME}s > 60s)"
        TEST_RESULT="FALLIDO"
    fi
    
    echo ""
    echo "üîç An√°lisis de LaunchDarkly Streaming:"
    
    if [ $ELAPSED_TIME -le 10 ]; then
        echo -e "   ${GREEN}üöÄ EXCELENTE: Propagaci√≥n en tiempo real (‚â§10s)${NC}"
        PERFORMANCE_RATING="EXCELENTE"
    elif [ $ELAPSED_TIME -le 30 ]; then
        echo -e "   ${BLUE}üëç BUENO: Propagaci√≥n r√°pida (‚â§30s)${NC}"
        PERFORMANCE_RATING="BUENO"
    elif [ $ELAPSED_TIME -le 60 ]; then
        echo -e "   ${YELLOW}‚ö†Ô∏è  ACEPTABLE: Dentro del SLA (‚â§60s)${NC}"
        PERFORMANCE_RATING="ACEPTABLE"
    else
        echo -e "   ${RED}‚ùå PROBLEM√ÅTICO: Fuera del SLA (>60s)${NC}"
        PERFORMANCE_RATING="PROBLEM√ÅTICO"
    fi
    
else
    echo -e "${RED}‚ùå No se detect√≥ cambio en ${MAX_WAIT_TIME}s${NC}"
    echo ""
    echo "üîç Posibles causas:"
    echo "   ‚Ä¢ No se realiz√≥ el cambio en el dashboard"
    echo "   ‚Ä¢ Problema de conectividad con LaunchDarkly"
    echo "   ‚Ä¢ Flag incorrecto o entorno incorrecto"
    echo "   ‚Ä¢ Streaming connection interrumpida"
    
    TEST_RESULT="NO_COMPLETADO"
    PERFORMANCE_RATING="N/A"
    ELAPSED_TIME="N/A"
fi

echo ""
echo "üìä Test 3: Verificaci√≥n de Streaming Connection"
echo "----------------------------------------------"

# Verificar logs del backend para streaming
echo "üîç Verificando estado de la conexi√≥n streaming..."

PROVIDER_INFO=$(curl -s http://localhost:3001/health/provider)
PROVIDER_NAME=$(echo "$PROVIDER_INFO" | jq -r '.provider.name // "unknown"')
PROVIDER_CONNECTED=$(echo "$PROVIDER_INFO" | jq -r '.provider.connected // false')

echo "üìã Estado del proveedor:"
echo "   ‚Ä¢ Proveedor: $PROVIDER_NAME"
echo "   ‚Ä¢ Conectado: $PROVIDER_CONNECTED"

if [ "$PROVIDER_NAME" = "launchdarkly" ] && [ "$PROVIDER_CONNECTED" = "true" ]; then
    echo -e "   ‚Ä¢ Streaming: ${GREEN}‚úÖ Activo${NC}"
else
    echo -e "   ‚Ä¢ Streaming: ${RED}‚ùå Inactivo${NC}"
fi

echo ""
echo "üéØ Resumen del Test #5:"
echo "======================"

if [ "$TEST_RESULT" = "PASADO" ]; then
    echo -e "${GREEN}‚úÖ Test #5 PASADO: Propagaci√≥n de cambios en tiempo esperado${NC}"
elif [ "$TEST_RESULT" = "FALLIDO" ]; then
    echo -e "${RED}‚ùå Test #5 FALLIDO: Propagaci√≥n fuera del SLA${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Test #5 NO COMPLETADO: No se detect√≥ cambio${NC}"
fi

echo ""
echo "üìä M√©tricas finales:"
echo "   ‚Ä¢ Tiempo de propagaci√≥n: ${ELAPSED_TIME}s"
echo "   ‚Ä¢ Target: ‚â§60s"
echo "   ‚Ä¢ Performance: $PERFORMANCE_RATING"
echo "   ‚Ä¢ Proveedor: LaunchDarkly (Streaming)"

echo ""
echo "üîÑ Comparaci√≥n con ConfigCat:"
echo "   ‚Ä¢ LaunchDarkly (Streaming): ~${ELAPSED_TIME}s"
echo "   ‚Ä¢ ConfigCat (Polling 30s): ~30-60s t√≠pico"

if [ "$TEST_RESULT" = "PASADO" ] && [ $ELAPSED_TIME -le 30 ]; then
    echo -e "   ‚Ä¢ ${GREEN}üèÜ Ventaja LaunchDarkly: Updates m√°s r√°pidos${NC}"
fi

echo ""
echo -e "${YELLOW}üí° Para repetir este test:${NC}"
echo "   1. Cambia el flag de vuelta al valor original ($INITIAL_VALUE)"
echo "   2. Ejecuta nuevamente este script"
echo "   3. Compara tiempos de propagaci√≥n"

echo ""
echo -e "${YELLOW}üöÄ Pr√≥ximo test: Test #6 - Kill-switch${NC}"

# Salir con c√≥digo apropiado
if [ "$TEST_RESULT" = "PASADO" ]; then
    exit 0
elif [ "$TEST_RESULT" = "FALLIDO" ]; then
    exit 1
else
    exit 2
fi 